import * as React from 'react';
import {
  Box,
  Button,
  Textarea,
  Modal,
  ModalDialog,
  DialogTitle,
  DialogContent,
  Stack,
  ModalClose,
  DialogActions,
} from '@mui/joy';
import { AutoAwesome, FaceRetouchingNatural } from '@mui/icons-material';


const App = () => {
  const [taskNode, setTaskNode] = React.useState<string>('');
  const [nodeName, setNodeName] = React.useState<string>('');
  const [taskDesc, setTaskDesc] = React.useState<string>('');
  const [personaDesc, setPersonaDesc] = React.useState<string>('');
  const [reportNode, setReportNode] = React.useState<string>('');
  const [loading, setLoading] = React.useState(false);
  const [modalOpen, setModalOpen] = React.useState<boolean>(false);
  const [userStatus, setUserStatus] = React.useState('');
  const [trialDays, setTrialDays] = React.useState<string>('0');

  const handleSubmit = (e) => {
    e.preventDefault();

    // create a task name with the current timestamp
    const demoTimestamp = new Date();

    const taskName: string = `self_explore_${demoTimestamp.getFullYear()}-${demoTimestamp.getMonth() + 1
      }-${demoTimestamp.getDate()}_${demoTimestamp.getHours()}-${demoTimestamp.getMinutes()}-${demoTimestamp.getSeconds()}`;

    // personaDescÍ∞Ä Í∏∞Î≥∏Í∞íÏùº Í≤ΩÏö∞ Ï†úÏô∏
    const postData = {
      nodeId: taskNode,
      taskName: taskName,
      taskDesc: taskDesc,
      personaDesc: personaDesc ? personaDesc : undefined,
    };

    // Figma pluginÏúºÎ°ú postData Ï†ÑÏÜ° Î°úÏßÅ...
    parent.postMessage({ pluginMessage: { type: 'submit', data: postData } }, '*');
  };

  const handleKeyDown = async (e) => {
    // MacÏóêÏÑúÎäî e.metaKeyÍ∞Ä trueÏù¥Í≥†, Windows/LinuxÏóêÏÑúÎäî e.ctrlKeyÍ∞Ä trueÏûÖÎãàÎã§.
    if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {
      handleSubmit(e);
    }
  };

  // submit button activation condition: taskDesc is not empty + nodeId is not empty

  const isEligible = taskDesc && taskNode && (userStatus === 'PAID' || userStatus === 'IN_TRIAL');

  // Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌñàÏùÑ Îïå, ÎßåÏïΩ node IDÍ∞Ä ÏûàÎã§Î©¥ controllerÎ°ú Ìï¥Îãπ nodeIDÏôÄ Ìï®Íªò moveFocus ÌÉÄÏûÖ Î©îÏãúÏßÄÎ•º Î≥¥ÎÇ¥Í≥†, ÏóÜÎã§Î©¥ consoleÏóê ÏóêÎü¨ Î©îÏãúÏßÄÎ•º Ï∂úÎ†•Ìï©ÎãàÎã§.
  const handleNodeClick = (nodeId: string) => {
    parent.postMessage({ pluginMessage: { type: 'moveFocus', data: nodeId } }, '*');
  };

  // Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌñàÏùÑ Îïå, controllerÎ°ú payment ÌÉÄÏûÖ Î©îÏãúÏßÄÎ•º Î≥¥ÎÇ¥Í≥†, loadingÏùÑ trueÎ°ú Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
  const handlePaymentClick = async () => {
    // payment APIÍ∞Ä ÏïÑÏßÅ Î¶¨Î∑∞ Ï§ëÏù¥ÎùºÎäî Î©îÏãúÏßÄÎ•º ParentÏóê Ï†ÑÎã¨Ìï©ÎãàÎã§.
    parent.postMessage({ pluginMessage: { type: 'payment' } }, '*');
    // setLoading(true);
  };

  // Ìä∏ÎùºÏù¥Ïñº Îç∞Ïù¥Î•º Í≥ÑÏÇ∞ÌïòÎäî Î°úÏßÅ 
  const calculateTrialDays = (trialDays: number): string => {
    
    const days = Math.ceil(trialDays);

    // ÎßåÏïΩ daysÍ∞Ä 1Ïù¥Î©¥, Î™á ÏãúÍ∞ÑÏù¥ ÎÇ®ÏïòÎäîÏßÄÎ•º Í≥ÑÏÇ∞Ìï¥ÏÑú '00 hours left' Î∞òÌôòÌï©ÎãàÎã§. 2 Ïù¥ÏÉÅ Ïù¥Î©¥, '0 days left'Î•º Î∞òÌôòÌï©ÎãàÎã§.
    if (days === 1) {
      const currentTime = new Date();
      const endTrialTime = new Date(currentTime.getTime() + trialDays * 24 * 60 * 60 * 1000);
      const hoursLeft = Math.ceil((endTrialTime.getTime() - currentTime.getTime()) / (1000 * 60 * 60));
      return hoursLeft + ' hours left';
    } else {
      return days + ' days left';
    }
  };

  React.useEffect(() => {
    window.onmessage = (event) => {
      const { type, message } = event.data.pluginMessage;
      if (type === 'nodeInfo') {
        console.log(message);

        setTaskNode(message.id);
        setNodeName(message.name);
      }
      if (type === 'clear') {
        setTaskNode('');
        setNodeName('');
        setReportNode('');
      }
      if (type === 'loading') {
        setLoading(message);
      }
      if (type === 'reportNode') {
        setReportNode(message);
      }
      if (type === 'userStatus') {
        switch (message.status) {
          case 'PAID':
            // Í≤∞Ï†ú ÏôÑÎ£å ÏÉÅÌÉú UI Ï≤òÎ¶¨
            setUserStatus(message.status);

            break;
          case 'TRIAL_ENDED':
            // Ìä∏ÎùºÏù¥Ïñº Í∏∞Í∞Ñ Ï¢ÖÎ£å Î∞è Í≤∞Ï†ú Ïú†ÎèÑ UI Ï≤òÎ¶¨
            setUserStatus(message.status);
            setTrialDays('0');
            break;
          case 'IN_TRIAL':
            // Ìä∏ÎùºÏù¥Ïñº Í∏∞Í∞Ñ Ï§ë UI Ï≤òÎ¶¨
            setUserStatus(message.status);
            // Ìä∏ÎùºÏù¥Ïñº ÎÇ®ÏùÄ ÏùºÏàòÎäî Ïò¨Î¶º Ï≤òÎ¶¨ (Ïòà : 1.1Ïùº -> 2Ïùº)
            const trialDays = calculateTrialDays(message.trialDays);
            setTrialDays(trialDays);

            break;
        }
      }
    };
  }, []);

  return (
    <>
      <Textarea
        placeholder={
          taskNode
            ? `Please enter the description of the task you want me on \"${nodeName}\" to complete in a few sentences.\nOnce done, click 'Submit' or press 'Cmd/Ctrl + Enter'`
            : 'Select a frame or component to start testing'
        }
        disabled={!taskNode}
        value={taskDesc}
        onChange={(event) => setTaskDesc(event.target.value)}
        onKeyDown={handleKeyDown}
        minRows={2}
        maxRows={6}
        size="md"
        startDecorator={
          <Box sx={{ display: 'flex', gap: 0.5, flex: 1 }}>
            <Button variant="outlined" color="neutral" onClick={() => handleNodeClick(taskNode)} size="sm">
              {/* if taskNode is empty, Button label is "üé® No frame". If set, use nodeName text and truncate the text */}
              {taskNode ? (nodeName.length > 12 ? `${nodeName.slice(0, 12)}...` : nodeName) : 'üé® No frame'}
            </Button>
            <Button
              variant="outlined"
              color="neutral"
              onClick={() => handleNodeClick(reportNode)}
              size="sm"
              disabled={!reportNode}
            >
              üìù Report
            </Button>
            <Button variant="outlined" color="neutral" sx={{ ml: 'auto' }} onClick={handlePaymentClick}>
              {userStatus === 'PAID' && `üí≥ Paid`}
              {userStatus === 'IN_TRIAL' && `‚è≥ ${trialDays}`}
              {userStatus === 'TRIAL_ENDED' && `üîí Trial Ended`}
            </Button>
          </Box>
        }
        endDecorator={
          <Box
            sx={{
              display: 'flex',
              gap: 'var(--Textarea-paddingBlock)',
              pt: 'var(--Textarea-paddingBlock)',
              borderTop: '1px solid',
              borderColor: 'divider',
              flex: 'auto',
            }}
          >
            <Button
              variant="plain"
              color="neutral"
              onClick={() => setModalOpen(true)}
              disabled={isEligible ? false : true}
              startDecorator={<FaceRetouchingNatural fontSize="small" />}
            >
              {/* if persona is empty, Button label is "Persona". If set use persona text and truncate the text */}
              {personaDesc ? (personaDesc.length > 12 ? `${personaDesc.slice(0, 12)}...` : personaDesc) : 'Persona'}
            </Button>

            <Button
              // if loading is true, button is disabled, if is not eligible, button is disabled as well
              loading={loading}
              disabled={isEligible ? false : true}
              loadingIndicator="Loading‚Ä¶"
              color="primary"
              sx={{ ml: 'auto' }}
              size="sm"
              onClick={handleSubmit}
              startDecorator={<AutoAwesome fontSize="small" />}
            >
              Submit
            </Button>
          </Box>
        }
        sx={{ minWidth: 480, minHeight: 240 }}
      />
      <Modal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}
      >
        <ModalDialog layout="fullscreen">
          <ModalClose />
          <DialogTitle>Create Persona</DialogTitle>
          <DialogContent>
            <Stack spacing={2} sx={{ height: '100%' }}>
              <Textarea
                placeholder="(Optional) Please enter the description of the user persona you'd like me to emulate : "
                autoFocus
                value={personaDesc}
                minRows={3}
                maxRows={6}
                onChange={(e) => setPersonaDesc(e.target.value)}
                sx={{ height: '100%' }}
              />
              <DialogActions>
                <Button
                  color="primary"
                  variant="soft"
                  onClick={() => {
                    setModalOpen(false);
                  }}
                >
                  Set Persona
                </Button>
                <Button
                  variant="plain"
                  color="neutral"
                  onClick={() => {
                    setPersonaDesc('');
                    setModalOpen(false);
                  }}
                >
                  Reset
                </Button>
              </DialogActions>
            </Stack>
          </DialogContent>
        </ModalDialog>
      </Modal>
    </>
  );
};

export default App;
